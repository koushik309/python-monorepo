name: Release Please action private repo

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  workflow_call:

# permissions:
#   contents: write
#   pull-requests: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  release-please:
    runs-on: ubuntu-latest
    env:
      DEBUG: release-please*
    steps:
      - name: checkout the repository
        uses: actions/checkout@v4

      - name: List files for debugging
        run: |
          ls -lR src/code/package1/

      - name: Get latest version from the private repo
        id: latest-version
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          set -e
          echo "Fetching latest version from private repository..."

          # Fetch content and save to file
          curl -sL -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/koushik309/Test-pvt/contents/src/code/package1/pyproject.toml" > content.json

          # Extract "content" field, remove JSON escaping (\n), and decode
          BASE64_ESCAPED=$(sed -n 's/^[[:space:]]*"content": "\(.*\)",$/\1/p' content.json)

          # Convert escaped \n to real newlines
          BASE64_CONTENT=$(echo -e "$BASE64_ESCAPED")

          # Validate
          if [ -z "$BASE64_CONTENT" ]; then
            echo "Base64 content is empty."
            cat content.json
            exit 1
          fi

          # Decode
          echo "$BASE64_CONTENT" | base64 --decode > decoded_pyproject.toml || {
            echo "Failed to decode base64"
            exit 1
          }

          echo "Decoded pyproject.toml:"
          cat decoded_pyproject.toml

          # Extract version
          VERSION=$(grep -o 'version = "[^"]*"' decoded_pyproject.toml | sed -E 's/version = "(.*)"/\1/')
          echo "Extracted LATEST_VERSION=$VERSION"
          echo "LATEST_VERSION=${VERSION}" >> "$GITHUB_OUTPUT"

      - name: Get current version
        id: current-version
        run: |
          if [ ! -f src/code/package1/pyproject.toml ]; then
            echo "Local pyproject.toml not found!"
            exit 1
          fi

          CURRENT_VERSION=$(grep -o 'version = "[^"]*"' src/code/package1/pyproject.toml | sed -E 's/version = "(.*)"/\1/')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_OUTPUT

      - name: Check for version update
        id: check-updates
        run: |
          if [[ "${{ steps.latest-version.outputs.LATEST_VERSION }}" != "${{ steps.current-version.outputs.CURRENT_VERSION }}" ]]; then
            echo "updates_needed=true" >> $GITHUB_OUTPUT
          else
            echo "updates_needed=false" >> $GITHUB_OUTPUT
          fi

      - name: Proceed if updates are needed
        if: steps.check-updates.outputs.updates_needed == 'true'
        run: |
          sed -i 's/version = ".*/version = "'${{ steps.latest-version.outputs.LATEST_VERSION }}'"/' src/code/package1/pyproject.toml

          echo "Updated pyproject.toml version to latest."

      - name: release-please-action
        id: release-please
        uses: googleapis/release-please-action@v4
        with:
          #release-type: python
          #token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

      # - name: Update default PR message title to user defined
      #   uses: actions/github-script@v7
      #   with:
      #     script: |
      #       const prs = await github.rest.pulls.list({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         state: 'open',
      #       });

      #       const releasePR = prs.data.find(pr => pr.title.includes('release'));
      #       if (releasePR) {
      #         const lines = releasePR.body.split('\n');
      #         if (lines[0].trim() === ':robot: I have created a release *beep* *boop*') {
      #           lines[0] = 'Release PR generated for version update:';
      #           const updatedBody = lines.join('\n');

      #           await github.rest.pulls.update({
      #             owner: context.repo.owner,
      #             repo: context.repo.repo,
      #             pull_number: releasePR.number,
      #             body: updatedBody,
      #           });
      #         }
